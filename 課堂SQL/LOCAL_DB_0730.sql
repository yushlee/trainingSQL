

-- SQL CASE WHEN 條件查詢


-- SQL UNION 聯集(不包含重覆值)
-- JOIN 連接兩張"資料表"關聯查詢
-- UNION 合併兩個"SQL"查詢結果
-- 1.查sql欄位個數必須一致
-- 2.查sql欄位型態必須一致
SELECT STORE_ID, STORE_NAME FROM store_information
UNION
SELECT GEOGRAPHY_ID, REGION_NAME FROM geography;

SELECT STORE_NAME FROM store_information
UNION
SELECT STORE_NAME FROM store_information;

-- LEFT JOIN + RIGHT JOIN = FULL JOIN
SELECT G.*, S.*
FROM  GEOGRAPHY G
LEFT JOIN STORE_INFORMATION S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
UNION
SELECT G.*, S.*
FROM  GEOGRAPHY G
RIGHT JOIN STORE_INFORMATION S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

--   SQL UNION ALL 聯集(包含重覆值)
SELECT STORE_NAME FROM store_information
UNION ALL
SELECT STORE_NAME FROM store_information;


-- SQL INTERSECT 交集(不包含重覆值)(MySQL不支援)
SELECT GEOGRAPHY_ID FROM GEOGRAPHY
INTERSECT
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION;

-- MySQL替代方案
-- 查詢交集結果
-- INNER JOIN + DISTINCT = INTERSECT
SELECT DISTINCT G.GEOGRAPHY_ID 
FROM GEOGRAPHY G
JOIN STORE_INFORMATION S ON G.GEOGRAPHY_ID  = S.GEOGRAPHY_ID;


-- SQL MINUS 排除(不包含重覆值)(MySQL不支援)
-- MINUS(Oracle)
-- 1,2,3
SELECT GEOGRAPHY_ID FROM GEOGRAPHY
MINUS
-- 1,2,null
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION;

-- EXCEPT (MS SQL Server)
SELECT GEOGRAPHY_ID FROM GEOGRAPHY
EXCEPT
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION;

-- MySQL替代方案
-- LEFT JOIN + table2.id IS NULL = MINUS
SELECT G.GEOGRAPHY_ID, S.GEOGRAPHY_ID
FROM geography G
LEFT JOIN store_information S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL;

-- SQL SubQuery 子查詢
-- 找出"最高"營業額的商店資料

-- 外查詢
SELECT * FROM STORE_INFORMATION
WHERE SALES = (
	-- 內查詢
	SELECT MAX(SALES) FROM STORE_INFORMATION
);

-- 『簡單子查詢』 (Simple Subquery)
SELECT SUM(SALES) FROM STORE_INFORMATION
WHERE STORE_ID IN (
	SELECT STORE_ID FROM STORE_INFORMATION WHERE GEOGRAPHY_ID = 2
);

-- 『相關子查詢』(Correlated Subquery)
-- 10,250
SELECT SUM(SALES) FROM STORE_INFORMATION S
WHERE GEOGRAPHY_ID IN (
	SELECT GEOGRAPHY_ID FROM GEOGRAPHY G
    WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
);

-- 13,250
SELECT SUM(SALES) FROM STORE_INFORMATION;

SELECT G.*, S.*
FROM (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
) G,
(
   SELECT GEOGRAPHY_ID, STORE_NAME FROM STORE_INFORMATION
) S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- 查詢每個部門高於平均部門薪資的員工
-- (結果依部門平均薪資降冪排序)
-- 1.先算出各部門的"平均薪資"
-- 2.查詢高於平均部門薪資的員工
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.SALARY, E.DEPARTMENT_ID, 
	D.DEPARTMENT_NAME, D_AVG_SALARY.DEP_AVG_SALARY
FROM (
	SELECT DEPARTMENT_ID, FLOOR(AVG(SALARY)) DEP_AVG_SALARY
	FROM EMPLOYEES
	GROUP BY DEPARTMENT_ID
) D_AVG_SALARY, EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D_AVG_SALARY.DEPARTMENT_ID
AND E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.SALARY > D_AVG_SALARY.DEP_AVG_SALARY
ORDER BY D_AVG_SALARY.DEP_AVG_SALARY DESC, E.SALARY DESC;

-- 簡單子查詢
-- 查詢與查詢之間彼此獨立"不能互相使用"對方的欄位
SELECT G.*, S.*
FROM (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
) G,
(
   SELECT GEOGRAPHY_ID, STORE_NAME
   FROM STORE_INFORMATION S, G
   WHERE S.GEOGRAPHY_ID = G.GEOGRAPHY_ID
) S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- WITH (Common Table Expressions)
-- 關聯式子查詢
-- 查詢與查詢之間可以相互使用欄位做關聯式查詢
WITH G AS (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
),
S AS (
   SELECT GEOGRAPHY_ID, STORE_NAME FROM STORE_INFORMATION
)
SELECT G.*, S.* FROM G, S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


WITH G AS (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
),
S AS (
   SELECT G.*,  STORE.STORE_ID, STORE.STORE_NAME 
   FROM STORE_INFORMATION STORE, G
   WHERE STORE.GEOGRAPHY_ID = G.GEOGRAPHY_ID
)
SELECT S.* FROM S;

-- SQL EXISTS 存在式關聯查詢
-- EXISTS 是用來測試「內查詢」有沒有產生任何結果。
-- 如果有的話，系統就會執行「外查詢」中的 SQL。
-- 若是沒有的話，那整個 SQL 語句就不會產生任何結果。

-- 外查詢
SELECT SUM(SALES) FROM STORE_INFORMATION
-- EXISTS 是用來測試「內查詢」有沒有產生任何結果
WHERE EXISTS (
	-- 內查詢
	SELECT * FROM STORE_INFORMATION
	WHERE GEOGRAPHY_ID = 2
);


-- 外查詢
SELECT SUM(SALES) FROM STORE_INFORMATION S1
-- EXISTS 是用來測試「內查詢」有沒有產生任何結果
WHERE EXISTS (
	-- 內查詢
	SELECT * FROM STORE_INFORMATION S2
	WHERE S2.GEOGRAPHY_ID = S1.GEOGRAPHY_ID
    AND S2.GEOGRAPHY_ID = 2
);

-- 'Los Angeles' 的 Sales 數值乘以2
-- 'San Diego' 的 Sales 數值乘以1.5
SELECT STORE_ID, STORE_NAME, SALES,
	CASE STORE_NAME
		WHEN 'Los Angeles' THEN SALES * 2
        WHEN 'San Diego'  THEN SALES * 1.5
		ELSE SALES END NEW_SALES
FROM STORE_INFORMATION;

-- 查詢每個商店營業額落在哪一個數值區間(1000)
SELECT STORE_ID, STORE_NAME, SALES,
	CASE 
		WHEN (SALES BETWEEN 0 AND 1000) THEN '0-1000'
        WHEN (SALES BETWEEN 1001 AND 2000) THEN '1001-2000'
        WHEN (SALES BETWEEN 2001 AND 3000) THEN '2001-3000'
        WHEN (SALES > 3000) THEN '> 3000'
		END RANGE_SALES
FROM STORE_INFORMATION
ORDER BY SALES;

-- 自我連結 (self join)
SELECT S1.*, S2.* 
FROM STORE_INFORMATION S1, STORE_INFORMATION S2
WHERE S2.SALES >= S1.SALES
ORDER BY S1.SALES, S2.SALES;


SELECT S1.STORE_ID, S1.STORE_NAME, COUNT(S2.STORE_ID) "STORE_RANK"
FROM STORE_INFORMATION S1, STORE_INFORMATION S2
WHERE S2.SALES >= S1.SALES
GROUP BY S1.STORE_ID, S1.STORE_NAME
ORDER BY S1.SALES DESC;


-- RANK( ) OVER ( [query_partition_clause ] order_by_clause)
-- RANK(必填)：排名函數,當有同名次時(排名结果是不連續的)
-- EX:雙冠軍就不會有亞軍
-- query_partition_clause(選填)：資料分群排名劃分欄位
-- order_by_clause (必填)：資料排序欄位
SELECT STORE_ID, STORE_NAME, SALES,
	RANK() OVER (ORDER BY SALES DESC) "RANK_STORE"
FROM STORE_INFORMATION;

-- Analytic Functions with OVER Clause (分析函數)
SELECT STORE_ID, STORE_NAME, SALES, GEOGRAPHY_ID,
	RANK() OVER (PARTITION BY GEOGRAPHY_ID  ORDER BY SALES DESC) "RANK_STORE"
FROM STORE_INFORMATION
ORDER BY GEOGRAPHY_ID, SALES DESC;

-- 當有同名次時(排名结果是連續的)
SELECT STORE_ID, STORE_NAME, SALES,
	RANK () OVER (ORDER BY SALES DESC) "RANK_STORE",
    DENSE_RANK () OVER (ORDER BY SALES DESC) "DENSE_RANK_STORE",
    -- 公式：(RANK(  ) - 1)  /  (總資料列筆數 - 1
    PERCENT_RANK () OVER (ORDER BY SALES DESC) "PERCENT_RANK_STORE",
    -- 依序編號
    ROW_NUMBER () OVER (ORDER BY SALES DESC) "ROW_NUMBER_STORE"
FROM STORE_INFORMATION;

-- Aggregate Functions with OVER Clause (聚合函數)
SELECT STORE_ID, STORE_NAME, SALES, GEOGRAPHY_ID,
    -- 依「區域劃分」取營業額"最小值"
    MIN(SALES) OVER (PARTITION BY GEOGRAPHY_ID) MIN_SALES,
    -- 依「區域劃分」取營業額"最大值"
    MAX(SALES) OVER (PARTITION BY GEOGRAPHY_ID) MAX_SALES,
    -- 依「區域劃分」取商店"數量"
    COUNT(STORE_ID) OVER (PARTITION BY GEOGRAPHY_ID) COUNT_STORE_ID,
    -- 依「區域劃分」取營業額"總和"
    SUM(SALES) OVER (PARTITION BY GEOGRAPHY_ID) SUM_SALES,
    -- 依「區域劃分」取營業額"平均"
    AVG(SALES) OVER (PARTITION BY GEOGRAPHY_ID) AVG_SALES
FROM STORE_INFORMATION
ORDER BY GEOGRAPHY_ID, SALES;



