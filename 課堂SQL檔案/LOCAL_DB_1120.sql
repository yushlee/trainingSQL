-- Ctrl + /

-- SQL UNION 聯集(不包含重覆值)
-- 1.各查詢之間所查詢的欄位"個數"必須一致!
-- 2.各查詢之間所查詢的欄位"型別"必須一致!
-- 1,2,3,null
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION
UNION
-- 1,2,3
SELECT GEOGRAPHY_ID  FROM GEOGRAPHY;

-- MySQL無此限制
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION
UNION
-- 1,2,3
SELECT REGION_NAME FROM GEOGRAPHY;


-- SQL UNION ALL 聯集(包含重覆值)
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION
UNION ALL
SELECT GEOGRAPHY_ID  FROM GEOGRAPHY;


-- SQL INTERSECT 交集
-- 1,2,3,null
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION
INTERSECT
-- 1,2,3
SELECT GEOGRAPHY_ID  FROM GEOGRAPHY;


-- MySQL沒有支援INTERSECT(替代方案)
-- https://www.yiibai.com/mysql/sql-union-mysql.html
-- INNER JOIN + DISTINCT = INTERSECT查詢交集結果
SELECT DISTINCT G.GEOGRAPHY_ID 
FROM GEOGRAPHY G
JOIN STORE_INFORMATION S ON G.GEOGRAPHY_ID  = S.GEOGRAPHY_ID;


-- 在 MINUS 指令下，不同的值只會被列出一次。 
-- SQL MINUS 排除(不包含重覆值) 
--  MINUS (Oracle)、EXCEPT (MS SQL)指令是運用在兩個 SQL 語句上
-- 它先找出第一個 SQL 語句所產生的結果，
-- 然後看這些結果「有沒有在第二個 SQL 語句的結果中」。
-- 如果「有」的話，那這一筆資料就被「去除」，而不會在最後的結果中出現。
-- 如果「沒有」的話，那這一筆資料就被「保留」，而就會在最後的結果中出現。


-- 1,2,3
SELECT GEOGRAPHY_ID  FROM GEOGRAPHY
MINUS
-- 1,2,null
SELECT GEOGRAPHY_ID FROM STORE_INFORMATION;
-- 查詢結果:3

-- MySQL沒有支援 MINUS(替代方案)
-- https://www.yiibai.com/mysql/minus.html
-- LEFT JOIN + table2.id IS NULL = MINUS
-- LEFT JOIN - INNER JOIN = MINUS
SELECT G.GEOGRAPHY_ID 
FROM geography G
LEFT JOIN store_information S ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
WHERE S.GEOGRAPHY_ID IS NULL;

-- 查詢"最高營業額"的"商店資料"
-- 外查詢
SELECT * FROM STORE_INFORMATION
WHERE SALES = (
	-- 內查詢
	SELECT MAX(SALES) FROM STORE_INFORMATION
);

-- SQL SubQuery 子查詢
-- 外查詢
SELECT SUM(SALES) FROM STORE_INFORMATION
WHERE GEOGRAPHY_ID IN (
	-- 內查詢
	SELECT GEOGRAPHY_ID FROM geography WHERE REGION_NAME = 'West'
);


-- 內部查詢本身與外部查詢沒有關係。這一類的子查詢稱為『簡單子查詢』 (Simple Subquery)
-- 部查詢是要利用到外部查詢提到的表格中的欄位，那這個字查詢就被稱為『相關子查詢』(Correlated Subquery)
-- 外查詢
SELECT SUM(SALES) FROM STORE_INFORMATION S 
WHERE GEOGRAPHY_ID IN (
	-- 內查詢
	SELECT GEOGRAPHY_ID FROM GEOGRAPHY G
    WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
);

-- 簡單子查詢
-- 查詢與查詢之間彼此獨立不能互相使用對方的欄位
SELECT G.*, S.*
FROM (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
) G,
(
	SELECT  STORE_ID,STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID FROM STORE_INFORMATION
)S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


SELECT G.*, S.*
FROM (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
) G JOIN
(
	SELECT  STORE_ID,STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID FROM STORE_INFORMATION
)S
ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


SELECT G_STORE.*
FROM (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
) G,
(
	SELECT G.GEOGRAPHY_ID, G.REGION_NAME, 
		S.STORE_ID, S.STORE_NAME, S.SALES, S.STORE_DATE
    FROM STORE_INFORMATION S, G
    WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
) G_STORE;



SELECT G.*, S.*
FROM GEOGRAPHY G, STORE_INFORMATION S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;


-- 相關子查詢
WITH G AS (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
), 
S AS (
	SELECT STORE_ID,STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID FROM STORE_INFORMATION
)
SELECT G.*, S.*
FROM G, S
WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID;

-- WITH (Common Table Expressions)
-- 子查詢與子查詢之間join查詢，有個支援更為合適的SQL專用語法 WITH  AS，使用SQL子查詢在撰寫更有結構性及閱續性!
-- 且查詢與查詢之間可以相互使用欄位做關聯式查詢
-- PS：注意只能下面的查詢使用上面查詢的欄位
WITH G AS (
	SELECT GEOGRAPHY_ID, REGION_NAME FROM GEOGRAPHY
), 
G_STORE AS (
	SELECT G.GEOGRAPHY_ID, G.REGION_NAME, 
		S.STORE_ID, S.STORE_NAME, S.SALES, S.STORE_DATE
    FROM STORE_INFORMATION S, G
    WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
)
SELECT * FROM G_STORE;


-- SQL EXISTS 存在式關聯查詢
-- EXISTS 是用來測試「內查詢」有沒有產生任何結果。
-- 如果有的話，系統就會執行「外查詢」中的 SQL。
-- 若是沒有的話，那整個 SQL 語句就不會產生任何結果。
-- 外查詢
SELECT * FROM STORE_INFORMATION 
WHERE EXISTS (
	-- 內查詢
	SELECT GEOGRAPHY_ID FROM GEOGRAPHY WHERE REGION_NAME = 'West'
);


-- EXISTS 搭配關聯查詢
-- 外查詢
SELECT * FROM STORE_INFORMATION S
WHERE EXISTS (
	-- 內查詢
	SELECT GEOGRAPHY_ID FROM GEOGRAPHY G 
    WHERE G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
    AND REGION_NAME = 'West'
);


-- SQL CASE WHEN 條件查詢

/*
SELECT CASE ("欄位名") 
  WHEN "條件1" THEN "結果1"
  WHEN "條件2" THEN "結果2"
  ...
  ELSE "結果N" END
  FROM "表格名" 
*/

SELECT STORE_ID, STORE_NAME, SALES,
	CASE STORE_NAME
		WHEN 'Los Angeles' THEN SALES * 2
        WHEN 'San Diego' THEN SALES * 1.5
        ELSE SALES END "NEW_SALES"
FROM STORE_INFORMATION
ORDER BY STORE_NAME;

-- 每一個營業額的所在的數字區間
-- 0 ~ 1000 3
-- 1001 ~ 2000 3
-- 2001 ~ 3000 3
-- > 3000 0
SELECT S.RANGE_SALES, COUNT(S.STORE_ID) 
FROM (
	SELECT STORE_ID, STORE_NAME, SALES,
		CASE 
			WHEN (SALES BETWEEN 0 AND 1000) THEN '0 ~ 1000'
			WHEN (SALES BETWEEN 1001 AND 2000) THEN '1001 ~ 2000'
			WHEN (SALES BETWEEN 2001 AND 3000) THEN '2001 ~ 3000'
			WHEN SALES > 3000 THEN '>3000'
			END "RANGE_SALES"
	FROM STORE_INFORMATION
	ORDER BY SALES
) S 
GROUP BY RANGE_SALES
ORDER BY RANGE_SALES;








