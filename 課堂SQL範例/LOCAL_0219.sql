CREATE TABLE TABLE1 (
-- 1.值不允許重覆UNIQUE
-- 2.NOT NULL
-- 3.PRIMARY KEY = UNIQUE + NOT NULL
  COLUMN0 CHAR(12) PRIMARY KEY,
-- 不允許一個欄位含有NULL值
	COLUMN1 CHAR(12) NOT NULL,
  COLUMN2 CHAR(12),
-- 1.欄位中的所有資料都是不一樣的值
-- 2.允許NULL
  COLUMN3 CHAR(12) UNIQUE,
--  保證一個欄位中的所有資料都是符合某些條件
  PRICE NUMERIC(10,0) CHECK (PRICE >= 100)
);

-- 組合鍵 (Composite Key)
CREATE TABLE TABLE2  (
  COLUMN1 VARCHAR(20) NOT NULL ,
  COLUMN2 VARCHAR(20) NOT NULL ,
  CONSTRAINT TABLE2_PK PRIMARY KEY  (COLUMN1,COLUMN2)
);

CREATE TABLE TABLE3(
  COLUMN1 VARCHAR(20),
  COLUMN2 VARCHAR(20)
);

-- 以下則是以ALTER改變現有表格架構來設定主鍵的方式：
ALTER TABLE TABLE3 ADD PRIMARY KEY (COLUMN1);


CREATE TABLE GEOGRAPHY (  
	GEOGRAPHY_ID NUMERIC (10,0) PRIMARY KEY,
	REGION_NAME  VARCHAR(255)
);

CREATE TABLE STORE_INFORMATION(
	STORE_ID   NUMERIC (10,0) PRIMARY KEY,
	STORE_NAME VARCHAR(255),
	SALES      NUMERIC (10,0) CHECK (SALES > 0),
	STORE_DATE datetime,
-- 	GEOGRAPHY_ID NUMERIC(10,0) REFERENCES GEOGRAPHY(GEOGRAPHY_ID)
 	GEOGRAPHY_ID NUMERIC (10,0),
 	CONSTRAINT CONSTRAINT_GEOGRAPHY_ID FOREIGN KEY (GEOGRAPHY_ID) REFERENCES GEOGRAPHY (GEOGRAPHY_ID)
);

CREATE VIEW REGION_SUM_SALES_VIEW AS (
	SELECT G.REGION_NAME, IFNULL(SUM(S.SALES), 0) "REGION_SUM_SALES"
	FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
	ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
	GROUP BY G.REGION_NAME
	ORDER BY REGION_SUM_SALES DESC
);

SELECT * FROM REGION_SUM_SALES_VIEW;


-- 單筆資料新增
INSERT INTO store_information (STORE_ID, STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID) VALUES(10, 'AppleInc', 6600, '2023-02-19', 3);

-- 當values已經是資料表全欄位時，欄位名稱可省略不寫(不建議此寫法)
INSERT INTO store_information VALUES (11, 'AppleInc', 6600, '2023-02-19', 3);

-- 多筆資料批次新增
-- insert 欄位必須與select"欄位個數一致"
-- insert 欄位必須與select"欄位型態一致"
INSERT INTO store_information_2 (STORE_ID, STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID)
SELECT STORE_ID, STORE_NAME, SALES, STORE_DATE, GEOGRAPHY_ID FROM store_information;


CREATE TABLE REGION_SUM_SALES (  
	REGION_NUMBER VARCHAR(255) PRIMARY KEY,
    SUM_SALES  NUMERIC (10,0)
);


INSERT INTO REGION_SUM_SALES(REGION_NUMBER, SUM_SALES)
	SELECT G.REGION_NAME, IFNULL(SUM(S.SALES), 0) "REGION_SUM_SALES"
	FROM GEOGRAPHY G LEFT JOIN STORE_INFORMATION S
	ON G.GEOGRAPHY_ID = S.GEOGRAPHY_ID
	GROUP BY G.REGION_NAME
	ORDER BY REGION_SUM_SALES DESC;

-- 建議資料修改前先做資料查詢確認要更新的資料範圍
UPDATE store_information SET STORE_NAME = 'AppleInc NEW' WHERE STORE_ID = 11;
-- 更新多個欄位
UPDATE store_information SET STORE_NAME = 'AppleInc NEW', SALES = 7700 WHERE STORE_ID = 11;

-- 建議資料刪除前先做資料查詢確認要刪除的資料範圍
DELETE FROM store_information WHERE STORE_ID IN (10,11);


DELETE FROM store_information;

ROLLBACK;

COMMIT;
